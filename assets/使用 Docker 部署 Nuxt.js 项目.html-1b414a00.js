import{_ as o,W as r,X as t,Y as e,Z as n,$ as s,a0 as i,D as c}from"./framework-8a0a3771.js";const d={},l=e("h2",{id:"nuxt-js",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#nuxt-js","aria-hidden":"true"},"#"),n(" Nuxt.js")],-1),p={href:"https://zh.nuxtjs.org/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://cn.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},h=i(`<h2 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h2><blockquote><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p></blockquote><h2 id="使用-docker-部署-nuxt-js-项目" tabindex="-1"><a class="header-anchor" href="#使用-docker-部署-nuxt-js-项目" aria-hidden="true">#</a> 使用 docker 部署 nuxt.js 项目</h2><h3 id="_1、构建-node-镜像" tabindex="-1"><a class="header-anchor" href="#_1、构建-node-镜像" aria-hidden="true">#</a> 1、构建 node 镜像</h3><blockquote><p>FROM node:alpine</p></blockquote><p>为啥使用 <strong>alpine</strong> 版本？</p><blockquote><p>相比于其他 Docker 镜像，它的容量非常小，仅仅只有 5 MB 左右（对比 Ubuntu 系列镜像接近 200 MB），且拥有非常友好的包管理机制。官方镜像来自 docker-alpine 项目。 目前 Docker 官方已开始推荐使用 Alpine 替代之前的 Ubuntu 做为基础镜像环境。这样会带来多个好处。包括镜像下载速度加快，镜像安全性提高，主机之间的切换更方便，占用更少磁盘空间等。</p></blockquote><h3 id="_2、设置项目保存目录" tabindex="-1"><a class="header-anchor" href="#_2、设置项目保存目录" aria-hidden="true">#</a> 2、设置项目保存目录</h3><blockquote><p>RUN mkdir -p /app/src</p></blockquote><h3 id="_3、复制项目代码到镜像" tabindex="-1"><a class="header-anchor" href="#_3、复制项目代码到镜像" aria-hidden="true">#</a> 3、复制项目代码到镜像</h3><blockquote><p>COPY ./src /app/src</p></blockquote><h3 id="_4、指定命令执行的目录" tabindex="-1"><a class="header-anchor" href="#_4、指定命令执行的目录" aria-hidden="true">#</a> 4、指定命令执行的目录</h3><blockquote><p>WORKDIR /app/src</p></blockquote><h3 id="_5、设置-host" tabindex="-1"><a class="header-anchor" href="#_5、设置-host" aria-hidden="true">#</a> 5、设置 host</h3><blockquote><p>ENV HOST 0.0.0.0</p></blockquote><h3 id="_6、执行项目安装及编译" tabindex="-1"><a class="header-anchor" href="#_6、执行项目安装及编译" aria-hidden="true">#</a> 6、执行项目安装及编译</h3><blockquote><p>RUN npm install RUN npm run build RUN npm cache clean --force</p></blockquote><h3 id="_7、设置外部访问端口" tabindex="-1"><a class="header-anchor" href="#_7、设置外部访问端口" aria-hidden="true">#</a> 7、设置外部访问端口</h3><blockquote><p>EXPOSE 3000</p></blockquote><h3 id="_8、执行-nuxt-项目运行命令" tabindex="-1"><a class="header-anchor" href="#_8、执行-nuxt-项目运行命令" aria-hidden="true">#</a> 8、执行 nuxt 项目运行命令</h3><blockquote><p>CMD [&quot;npm&quot;, &quot;start&quot;]</p></blockquote><h2 id="完整的-dockerfile-文件" tabindex="-1"><a class="header-anchor" href="#完整的-dockerfile-文件" aria-hidden="true">#</a> 完整的 Dockerfile 文件</h2><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> node:alpine</span>

<span class="token instruction"><span class="token keyword">RUN</span> mkdir -p /app/src</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./src /app/src</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app/src</span>

<span class="token instruction"><span class="token keyword">ENV</span> HOST <span class="token string">&quot;0.0.0.0&quot;</span></span>

<span class="token instruction"><span class="token keyword">RUN</span> sed -i <span class="token string">&quot;s/dl-cdn.alpinelinux.org/\${ALPINE_REPOSITORIES}/g&quot;</span> /etc/apk/repositories</span>

<span class="token instruction"><span class="token keyword">RUN</span> apk add --no-cache make gcc g++ python</span>

<span class="token instruction"><span class="token keyword">RUN</span> npm install</span>
<span class="token instruction"><span class="token keyword">RUN</span> npm run build</span>
<span class="token instruction"><span class="token keyword">RUN</span> npm cache clean --force</span>

<span class="token instruction"><span class="token keyword">RUN</span> apk del make gcc g++ python</span>

<span class="token instruction"><span class="token keyword">EXPOSE</span> 3000</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;npm&quot;</span>, <span class="token string">&quot;start&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当在项目中使用 sass 或者 scss 时，需依赖 python 环境，所以需要安装 python，当然在编译相关资源后，可以删除相应的依赖以减小镜像体积。</p><h2 id="运行-docker" tabindex="-1"><a class="header-anchor" href="#运行-docker" aria-hidden="true">#</a> 运行 Docker</h2><h3 id="_1、构建镜像" tabindex="-1"><a class="header-anchor" href="#_1、构建镜像" aria-hidden="true">#</a> 1、构建镜像</h3><blockquote><p>docker build -t nuxt-demo</p></blockquote><h3 id="_2、启动容器" tabindex="-1"><a class="header-anchor" href="#_2、启动容器" aria-hidden="true">#</a> 2、启动容器</h3><blockquote><p>docker run -dt -p 3000:3000 nuxt-demo</p></blockquote><h3 id="_3、访问" tabindex="-1"><a class="header-anchor" href="#_3、访问" aria-hidden="true">#</a> 3、访问</h3><p>打开浏览器，访问 127.0.0.1:3000</p><h2 id="后记" tabindex="-1"><a class="header-anchor" href="#后记" aria-hidden="true">#</a> 后记</h2>`,32),k={href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"},b=e("li",null,"2、可以用 nginx 对容器进行代理，避免直接以端口的形式访问容器。",-1);function _(m,v){const a=c("ExternalLinkIcon");return r(),t("div",null,[l,e("p",null,[e("a",p,[n("Nuxt.js"),s(a)]),n(" 是 "),e("a",u,[n("Vue.js"),s(a)]),n(" 的通用应用框架，采用服务器端渲染（SSR 渲染），使得基于 Vue 的单页 Web 应用 (single page web application，SPA) 也能够拥有良好的 SEO (Search Engine Optimization)支持。")]),h,e("ul",null,[e("li",null,[n("1、可以用 "),e("a",k,[n("Docker Compose"),s(a)]),n(" 对容器进行编排，快速的部署多容器应用。")]),b])])}const q=o(d,[["render",_],["__file","使用 Docker 部署 Nuxt.js 项目.html.vue"]]);export{q as default};
